module NeuralNetwork (input logic clk, reset,
						    input logic x_input, y_input,
					      output logic [31:0] neuron_r0_output, neuron_r1_output, neuron_r2_output, neuron_s0_output, neuron_s1_output,
						   output logic [31:0] Sigmoid_delta0, Sigmoid_delta1, ReLU_delta0, ReLU_delta1, ReLU_delta2,
							output logic [31:0] new_weights_s0_1, new_weights_s0_2, new_weights_s0_3, new_bias_s0,
							output logic [31:0] new_weights_s1_1, new_weights_s1_2, new_weights_s1_3, new_bias_s1,
							output logic [31:0] new_weights_r0_1, new_weights_r0_2, new_bias_r0,
							output logic [31:0] new_weights_r1_1, new_weights_r1_2, new_bias_r1,
							output logic [31:0] new_weights_r2_1, new_weights_r2_2, new_bias_r2);

// VARIABLE DECLARATION
							
logic flag1, flag2;
logic [31:0] learning_rate;
logic [31:0] xn_input, yn_input;

logic [31:0] expected0, expected1, loss0, loss1;
					  
logic [31:0] weights_r0_1, weights_r0_2;
logic [31:0] weights_r1_1, weights_r1_2;
logic [31:0] weights_r2_1, weights_r2_2;

logic [31:0] weights_s0_1, weights_s0_2, weights_s0_3;
logic [31:0] weights_s1_1, weights_s1_2, weights_s1_3;

logic [31:0] bias_r0, bias_r1, bias_r2, bias_s0, bias_s1;

//VALUE ASSIGNMENT (WILL LATER BE REPLACED WITH A ROM)

assign weights_r0_1 = 32'h3c6eaa1d;
assign weights_r0_2 = 32'h3d3a568e;
assign bias_r0 = 32'h00000000;

assign weights_r1_1 = 32'h3d9ddb45;
assign weights_r1_2 = 32'h3d907d36;
assign bias_r1 = 32'h00000000;

assign weights_r2_1 = 32'h3d95e7bb;
assign weights_r2_2 = 32'h3d319149;
assign bias_r2 = 32'h00000000;

assign weights_s0_1 = 32'h3da3d81d;
assign weights_s0_2 = 32'h3d5a46c3;
assign weights_s0_3 = 32'h3c0352e7;
assign bias_s0 = 32'h00000000;

assign weights_s1_1 = 32'h3d3ac164;
assign weights_s1_2 = 32'h3b9ceaf6;
assign weights_s1_3 = 32'h3dbf1219;
assign bias_s1 = 32'h00000000;

assign learning_rate = 32'h3c23d70a;

assign expected0 = 32'h3f800000;
assign expected1 = 32'h00000000;

assign xn_input = (x_input == 0) ? 32'h00000000:32'h3f800000;
assign yn_input = (y_input == 0) ? 32'h00000000:32'h3f800000;

// NN STRUCTURE STARTS HERE

// Forward-Propagation
					  
ReLUNeuronFP FP_r0(clk, reset, xn_input, yn_input, weights_r0_1, weights_r0_2, bias_r0, neuron_r0_output);
ReLUNeuronFP FP_r1(clk, reset, xn_input, yn_input, weights_r1_1, weights_r1_2, bias_r1, neuron_r1_output);
ReLUNeuronFP FP_r2(clk, reset, xn_input, yn_input, weights_r2_1, weights_r2_2, bias_r2, neuron_r2_output);

SigmoidNeuronFP FP_s0(clk, reset, neuron_r0_output, neuron_r1_output, neuron_r2_output, weights_s0_1, weights_s0_2, weights_s0_3, bias_s0, neuron_s0_output);
SigmoidNeuronFP FP_s1(clk, reset, neuron_r0_output, neuron_r1_output, neuron_r2_output, weights_s1_1, weights_s1_2, weights_s1_3, bias_s1, neuron_s1_output);
			
// Back-Propagation

SigmoidNeuronBP BP_s0(clk, reset, neuron_s0_output, expected0, Sigmoid_delta0);
SigmoidNeuronBP BP_ds1(clk, reset, neuron_s1_output, expected1, Sigmoid_delta1);

ReLUNeuronBP BP_r0(clk, reset, neuron_r0_output, weights_s0_1, weights_s1_1, Sigmoid_delta0, Sigmoid_delta1, ReLU_delta0);
ReLUNeuronBP BP_r1(clk, reset, neuron_r1_output, weights_s0_2, weights_s1_2, Sigmoid_delta0, Sigmoid_delta1, ReLU_delta1);
ReLUNeuronBP BP_r2(clk, reset, neuron_r2_output, weights_s0_3, weights_s1_3, Sigmoid_delta0, Sigmoid_delta1, ReLU_delta2);

// Parameter Optimisation

SigmoidNeuronOP OP_s0(clk, reset, neuron_r0_output, neuron_r1_output, neuron_r2_output, weights_s0_1, weights_s0_2, weights_s0_3, bias_s0, Sigmoid_delta0, learning_rate, new_weights_s0_1, new_weights_s0_2, new_weights_s0_3, new_bias_s0);
SigmoidNeuronOP OP_s1(clk, reset, neuron_r0_output, neuron_r1_output, neuron_r2_output, weights_s1_1, weights_s1_2, weights_s1_3, bias_s1, Sigmoid_delta1, learning_rate, new_weights_s1_1, new_weights_s1_2, new_weights_s1_3, new_bias_s1);

ReLUNeuronOP OP_r0(clk, reset, xn_input, yn_input, weights_r0_1, weights_r0_2, bias_r0, ReLU_delta0, learning_rate, new_weights_r0_1, new_weights_r0_2, new_bias_r0);
ReLUNeuronOP OP_r1(clk, reset, xn_input, yn_input, weights_r1_1, weights_r1_2, bias_r1, ReLU_delta1, learning_rate, new_weights_r1_1, new_weights_r1_2, new_bias_r1);
ReLUNeuronOP OP_r2(clk, reset, xn_input, yn_input, weights_r2_1, weights_r2_2, bias_r2, ReLU_delta2, learning_rate, new_weights_r2_1, new_weights_r2_2, new_bias_r2);

endmodule 		  


