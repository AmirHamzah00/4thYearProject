module comparefixedpoint (input [31:0] a,b, output q);

 reg signbit;
 reg [31:0] temp,A_b,B_b;

//recognise sign bit
 assign signbit = ~(a[31]^b[31]);

//two complement to binary
 assign A_b = ~(a - 1'b1);
 assign B_b = ~(b - 1'b1);

 always_comb
 begin
    if (signbit == 0) // The two input have different sign
        temp = a[31] ? b : a ;

    else // The two inputs have same sign
    begin
        if (a[31] == 0) temp = a >= b ? a : b ; // Input is positive
        else temp = A_b >= B_b ? b : a; // Input is negative
    end
 end

 assign q = (temp == a) ? 1'b1 : 1'b0;


endmodule 

module  addfixed( input [31:0] a,b, output [31:0] q);
 
 assign q = a + b;
 
endmodule

module multfixed (input	 [31:0] a,b,
              output [31:0] q);    

 reg [31:0] A_b,B_b,tmp,mult_output;
 reg [63:0] mult_result;
 wire signbit;

 //change to binary if its negative
 assign A_b = (a[31]) ? ~(a - 1'b1) : a;
 assign B_b = (b[31]) ? ~(b - 1'b1) : b;

 //assign sign bit
 assign signbit = a[31]^b[31]; //XOR

 //multiplication and truncate
 assign mult_result = A_b*B_b;
 assign tmp = mult_result[63-6:26];

 //change to two complement if negative
 assign q = (signbit) ? ~tmp + 1'b1 : tmp;
 
endmodule